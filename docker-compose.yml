version: '3.8'

services:
  # Databases
  items-db:
    image: postgres:15-alpine
    container_name: items-db
    environment:
      POSTGRES_DB: items_db
      POSTGRES_USER: items_user
      POSTGRES_PASSWORD: items_pass
    volumes:
      - items_db_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - warehouse-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U items_user -d items_db']
      interval: 10s
      timeout: 5s
      retries: 5

  orders-db:
    image: postgres:15-alpine
    container_name: orders-db
    environment:
      POSTGRES_DB: orders_db
      POSTGRES_USER: orders_user
      POSTGRES_PASSWORD: orders_pass
    volumes:
      - orders_db_data:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    networks:
      - warehouse-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U orders_user -d orders_db']
      interval: 10s
      timeout: 5s
      retries: 5

  users-db:
    image: postgres:15-alpine
    container_name: users-db
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: users_user
      POSTGRES_PASSWORD: users_pass
    volumes:
      - users_db_data:/var/lib/postgresql/data
    ports:
      - '5434:5432'
    networks:
      - warehouse-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U users_user -d users_db']
      interval: 10s
      timeout: 5s
      retries: 5

  # Microservices
  items-service:
    build:
      context: ./items-service
      dockerfile: Dockerfile
    container_name: items-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      items-db:
        condition: service_healthy
    networks:
      - warehouse-network
    restart: unless-stopped

  orders-service:
    build:
      context: ./orders-service
      dockerfile: Dockerfile
    container_name: orders-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      orders-db:
        condition: service_healthy
    networks:
      - warehouse-network
    restart: unless-stopped

  users-service:
    build:
      context: ./users-service
      dockerfile: Dockerfile
    container_name: users-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      users-db:
        condition: service_healthy
    networks:
      - warehouse-network
    restart: unless-stopped

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - warehouse-network
    restart: unless-stopped

  swagger-gateway:
    build:
      context: ./swagger-gateway
      dockerfile: Dockerfile
    container_name: swagger-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - warehouse-network
    restart: unless-stopped

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: warehouse-nginx
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - items-service
      - orders-service
      - users-service
      - auth-service
      - swagger-gateway
    networks:
      - warehouse-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  items_db_data:
    driver: local
  orders_db_data:
    driver: local
  users_db_data:
    driver: local

networks:
  warehouse-network:
    driver: bridge
    name: warehouse-network
